DATA ENCRYPTION:
    XChaCha20-Poly1305:
        1) libsodium recommends this as AEAD construction https://libsodium.gitbook.io/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction
        2) For encryption I will use https://github.com/pyca/pynacl
            that is a binding to libsodium lib and is listed in https://doc.libsodium.org/bindings_for_other_languages

    CSPRNG:
        1) using key_manager.generate_random_key generate 256 bit key with the help of /dev/random
            This generates csprn with good properties because it is close to really random values.

    Nonce:
        2) using key_manager.generate_nonce generates 192 bit nonce with the help of /dev/urandom
            Use /dev/urandom for Nonce because it is a non-blocking source.
            /dev/random blocks if there is not enough entropy information to generate CSPRN.

STORING KEY:
    1) For this part I choose to store key locally without KMS, so 'envelope encryption' is not an option,
        because DEKs and KEKs should be stored in separate environments.
        The key is stored in a filesystem so that if our db is stolen key remains uncompromised or visa versa.
        The file has restricted access to only one authoritative user so that other users cannot access/modify its content
        The file is not included into vcs for the same reason
        The key is not stored in an environment variable because there are ways to expose it /proc/self/environ

    NOTE: I understand that using Amazon/Google KMS with envelope encryption leads to much better security than storing key locally.

    2) Restricting access to secret key:
        created new user 'secret_key_owner' and created file with access only for this user.

        commands:
            sudo touch secret_key
            chmod 700 secret_key

            sudo adduser non-authoritative-user
            su - non-authoritative-user
            cat /home/rukadelica/PycharmProjects/SecurityLab5-6/secret_key
              Permission denied

        NOTE: I understand that all root users can still access this file and modify it.
              The ability to gain root rights should be managed properly.

        source: https://askubuntu.com/questions/636092/how-to-get-sudo-to-prompt-you-for-a-password-each-time


VULNERABILITIES:
    1) root user has access to file.
    2) password for the authoritative user can be compromised
    3) logs from server can compromise the key so that non-authoritative users will see it
    4) All the sensitive data is encrypted with only one key so all the data will be compromised if key is retrieved somehow


Further improvements:
    Introduce key rotation/lifetime.
    Use KMS with envelope encryption
    Do not store sensitive data

STORAGE DOCUMENTATION:
    'Generate secret key file. And put it in environment(file name, not key)'
    ./sensitive_data/csprng.sh <secret_key_file>
    export SENSITIVE_DATA_SECRET_KEY_FILE=<secret_key_file>

    'To use Encryption it is required to extend SensitiveDataMixin and add sensitive_fields.'
    YourModel(SensitiveDataMixin, models.Model):
        my_extremely_sensitive_info = ...
        ...
        class Sensitive:
            sensitive_fields = (my_extremely_sensitive_info, ...)

    Warning right now only 'str' type is supported
    Warning  QuerySet update, bulk_update is not supported right now

Links to used resources

https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation
https://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html
https://cloud.google.com/kms/docs/envelope-encryption
https://libsodium.gitbook.io/doc/
https://pypi.org/project/PyNaCl/
