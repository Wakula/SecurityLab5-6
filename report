Storage is implemented with Django==3.1.4
"By default, Django uses the PBKDF2 algorithm with a SHA256 hash, a password stretching mechanism recommended by NIST."


DEFAULT STORAGE SETTINGS:
Passwords are not stored in the database, instead their PBKDF2 password hashes are stored.

PBKDF2:
    1) Has 3 required "Cryptographic hash function" properties.
            1. given  h = hash(m), there is absolutely low chance that hash(h) == m
            2. given h = hash(m), there is absolutely low chance to find such m2 that h == hash(m2)
            3. given two different m1 and m2, there is absolutely low chance that hash(m1) == hash(m2)
        First property makes it almost impossible for a hacker to obtain original password from hash
        Second and third property makes it almost impossible for a hacker to find/generate such a message
        that in result of hashing equals to any hashed password in the database
    2) Salt usage. If users have identical passwords salt prevents from equal hashes for them.
        Defends against rainbow tables
    3) Multiple work factor
        Has 216000 round of iterations
        Documentation states that "Weâ€™ve chosen a reasonable default (and will increase it with each release of Django)"
        Note:
        could not find any reliable source of information that would state that
        this number of iterations is not enough in 2020
        Defends against brute forcing password dictionaries

Detected problems:
    Django has no pre-hashing for passwords. Uses max amount of bytes 4096 for password
    PBKDF2 has low mem-complexity.

Solving:
    To improve default storage settings Ill change default hashing algorithm to Argon2.
    And will add pre-hashing with sha512 for passwords.

    Argon2 can have high mem-complexity and parallel calculation that leads to better defence against GPU attack threats.
    Pre-hashing allows to remove max amount of bytes for password restriction

Possible further improvements:
    TODO: name further possible improvements

https://auth0.com/blog/adding-salt-to-hashing-a-better-way-to-store-passwords/
https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
https://www.password-hashing.net/argon2-specs.pdf
https://stackoverflow.com/questions/58431973/argon2-library-that-hashes-passwords-without-a-secret-and-with-a-random-salt-tha
https://docs.djangoproject.com/en/3.1/topics/auth/passwords/
https://en.wikipedia.org/wiki/Cryptographic_hash_function
